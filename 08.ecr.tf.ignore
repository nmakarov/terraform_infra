resource "aws_ecr_repository" "mlsfarm" {
    name = "mlsfarm"
    tags = {
        Name = var.namespace
    }
}

resource "aws_ecs_cluster" "mlsfarm" {
    name = "mlsfarm"
    tags = {
        Name = var.namespace
    }
}

variable "cloudwatch_group" {
    description = "CloudWatch group name."
    type = string
    # default = "supreme-task-group"
    default = "mlsfarm-task-group"
}

resource "aws_ecs_task_definition" "mlsfarm_first" {
    family                   = "mlsfarm_first" 
    container_definitions    = <<DEFINITION
    [
        {
            "name": "my-first-task",
            "image": "${aws_ecr_repository.mlsfarm.repository_url}",
            "essential": true,
            "command": ["npm run start:storefront"],
            "environment": [
                {"name": "NODE_ENV", "value": "production"}
            ],
            "portMappings": [
                {
                    "containerPort": 5021,
                    "hostPort": 5021
                }
            ],

            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "${var.cloudwatch_group}",
                    "awslogs-region": var.region,
                    "awslogs-stream-prefix": "mlsfarm"
                }
            },

            "memory": 512,
            "cpu": 256
        }
    ]
    DEFINITION
    requires_compatibilities = ["FARGATE"]
    network_mode             = "awsvpc"    # Using awsvpc as our network mode as this is required for Fargate
    memory                   = 512
    cpu                      = 256
    execution_role_arn       = aws_iam_role.mlsfarmExecutionRole.arn

    tags = {
        Name = var.namespace
    }
}

# ecsTaskExecutionRole
resource "aws_iam_role" "mlsfarmExecutionRole" {
    name               = "mlsfarmExecutionRole"
    assume_role_policy = data.aws_iam_policy_document.mlsfarm_policy.json

    tags = {
        Name = var.namespace
    }
}

# assume_role_policy
data "aws_iam_policy_document" "mlsfarm_policy" {
    statement {
        actions = ["sts:AssumeRole"]

        principals {
            type        = "Service"
            identifiers = ["ecs-tasks.amazonaws.com"]
        }
    }
}

# ecsTaskExecutionRole_policy
resource "aws_iam_role_policy_attachment" "mlsfarm_role_policy" {
    role       = aws_iam_role.mlsfarmExecutionRole.name
    policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

resource "aws_default_vpc" "default_vpc" {
    tags = {
        Name = var.namespace
    }
}

resource "aws_default_subnet" "default_subnet_a" {
  availability_zone = "ca-central-1a"
    tags = {
        Name = var.namespace
    }
}

# resource "aws_default_subnet" "default_subnet_b" {
#   availability_zone = "ca-central-1b"
#     tags = {
#         Name = var.namespace
#     }
# }

# resource "aws_default_subnet" "default_subnet_c" {
#   availability_zone = "ca-central-1c"
#     tags = {
#         Name = var.namespace
#     }
# }

resource "aws_ecs_service" "mlsfarm_service" {
    name            = "mlsfarm-service"
    cluster         = aws_ecs_cluster.mlsfarm.id
    task_definition = aws_ecs_task_definition.mlsfarm_first.arn
    launch_type     = "FARGATE"
    desired_count   = 1 # or 3

    network_configuration {
        subnets          = [aws_default_subnet.default_subnet_a.id]
        # subnets          = ["${aws_default_subnet.default_subnet_a.id}", "${aws_default_subnet.default_subnet_b.id}", "${aws_default_subnet.default_subnet_c.id}"]
        # subnets = [aws_subnet.mlsfarm]
        assign_public_ip = true # Providing our containers with public IPs
    }

    tags = {
        Name = var.namespace
    }
}

# application_load_balancer
# resource "aws_alb" "mlsfarm" {
#     name               = "mlsfarm"
#     load_balancer_type = "application"
#     subnets = [
#         aws_default_subnet.default_subnet_a.id
#         # "${aws_default_subnet.default_subnet_b.id}",
#         # "${aws_default_subnet.default_subnet_c.id}"
#     ]
#     security_groups = [aws_security_group.mlsfarmlbsg.id]
# }

# load_balancer_security_group
# resource "aws_security_group" "mlsfarmlbsg" {
#     ingress {
#         from_port   = 5021
#         to_port     = 5021
#         protocol    = "tcp"
#         cidr_blocks = ["0.0.0.0/0"]
#     }

#     egress {
#         from_port   = 0
#         to_port     = 0
#         protocol    = "-1"
#         cidr_blocks = ["0.0.0.0/0"]
#     }
# }
